sd_CV_tot[1,i-2]=round(sd(wholesale[,i]/1000),4)
sd_CV_tot[2,i-2]=round(sd(wholesale[,i]/1000)/mean(wholesale[,i]/1000),4)
sd_CV_ARB[1,i-2]=round(sd(wholesale[channel=="ARB",i]/1000),4)
sd_CV_ARB[2,i-2]=round(sd(wholesale[channel=="ARB",i]/1000)/mean(wholesale[channel=="ARB",i]/1000),4)
sd_CV_Dettaglio[1,i-2]=round(sd(wholesale[channel=="Dettaglio",i]/1000),4)
sd_CV_Dettaglio[2,i-2]=round(sd(wholesale[channel=="Dettaglio",i]/1000)/mean(wholesale[channel=="Dettaglio",i]/1000),4)
}
rownames(sd_CV_tot)=rownames(sd_CV_ARB)=rownames(sd_CV_Dettaglio)=c("SD","CV");
colnames(sd_CV_tot)=colnames(sd_CV_ARB)=colnames(sd_CV_Dettaglio)=colnames(prodotti);
print("SD E CV TOTALI"); sd_CV_tot
print("SD E CV ARB"); sd_CV_ARB
print("SD E CV DETTAGLIO"); sd_CV_Dettaglio
cv_tot=rbind(sd_CV_tot[2,],sd_CV_ARB[2,],sd_CV_Dettaglio[2,])
rownames(cv_tot)=c("CV TOT","CV ARB","CV DETTAGLIO")
###INDICI CONFRONTO: MEDIA/MEDIANA E QUARTILI
indici_confronto_tot=rbind(c(1:6),c(1:6));
for(i in 1:dim(prodotti)[2]) {
quantile_temp=quantile(prodotti[,i]/1000,seq(0,1,0.25));
indici_confronto_tot[1,i]=round((mean(prodotti[,i]/1000)-quantile_temp[3])/sd(prodotti[,i]/1000),4)
indici_confronto_tot[2,i]=round((quantile_temp[4]-2*quantile_temp[3]+quantile_temp[2])/(quantile_temp[4]-quantile_temp[2]),4)
}
rownames(indici_confronto_tot)=c("MEDIA/MEDIANA","QUARTILI");
colnames(indici_confronto_tot)=colnames(prodotti);
print("MEDIA/MEDIANA E QUARTILI TOTALI"); indici_confronto_tot
indici_confronto_ARB=rbind(c(1:6),c(1:6));
indici_confronto_Dettaglio=rbind(c(1:6),c(1:6));
for(i in 3:8) {
quantile_temp=quantile(wholesale[channel=="ARB",i]/1000,seq(0,1,0.25));
quantile_temp1=quantile(wholesale[channel=="Dettaglio",i]/1000,seq(0,1,0.25));
indici_confronto_ARB[1,i-2]=round((mean(wholesale[channel=="ARB",i-2]/1000)-quantile_temp[3])/sd(wholesale[channel=="ARB",i]/1000),4)
indici_confronto_ARB[2,i-2]=round((quantile_temp[4]-2*quantile_temp[3]+quantile_temp[2])/(quantile_temp[4]-quantile_temp[2]),4)
indici_confronto_Dettaglio[1,i-2]=round((mean(wholesale[channel=="Dettaglio",i]/1000)-quantile_temp1[3])/sd(wholesale[channel=="Dettaglio",i]/1000),4)
indici_confronto_Dettaglio[2,i-2]=round((quantile_temp1[4]-2*quantile_temp1[3]+quantile_temp1[2])/(quantile_temp1[4]-quantile_temp1[2]),4)
}
rownames(indici_confronto_ARB)=rownames(indici_confronto_Dettaglio)=c("MEDIA/MEDIANA","QUARTILI")
colnames(indici_confronto_ARB)=colnames(indici_confronto_Dettaglio)=colnames(prodotti)
print("MEDIA/MEDIANA E QUARTILI ARB"); indici_confronto_ARB
print("MEDIA/MEDIANA E QUARTILI DETTAGLIO"); indici_confronto_Dettaglio
vect <- c(1:5)
vect
as.matrix(vect)
proditt
t
t <- cluster::animals
t
as.matrix(t)
load_all()
library(Bross)
prodotti
quantili(prodotti)
load_all()
library(Bross)
quantili(prodotti)
load_all()
library(Bross   )
quantili(prodotti)
quantili(wholesale+)
quantili(wholesale)
quantili(prodotti)
plot(prodotti[,1:6]/1000, xlim=c(0,30),ylim=c(0,30))
title("TOTALE")
plot(wholesale[channel=="ARB",3:8]/1000, xlim=c(0,30),ylim=c(0,30))
title("ARB")
dev.new()
plot(wholesale[channel=="Dettaglio",3:8]/1000, xlim=c(0,30),ylim=c(0,30))
title("Dettaglio")
###GRAFICO DISPERSIONE VARIABILI CORRELATE
plot(wholesale[channel=="ARB",5]/1000,wholesale[channel=="ARB",4]/1000,ylim=c(0,40),xlim=c(0,40),xlab="Grocery",ylab="Milk",main="Grafico dispersione: Milk ~ Grocery [limite 40M]",col="orange",pch=17)
par(new=T)
plot(wholesale[channel=="Dettaglio",5]/1000,wholesale[channel=="Dettaglio",4]/1000,ylim=c(0,40),xlim=c(0,40),xlab="",ylab="",main="",col="purple",pch=18)
abline(h=mean(Milk/1000),col="red",lwd=2)
abline(v=mean(Grocery/1000),col="blue",lwd=2)
legend(30,38,legend=c("ARB","Dettaglio"),col=c("orange","purple"),pch=c(17,18))
sd_CV_tot=rbind(c(1:6),c(1:6));
sd_CV_ARB=rbind(c(1:6),c(1:6));
sd_CV_Dettaglio=rbind(c(1:6),c(1:6));
for(i in 3:8) {
sd_CV_tot[1,i-2]=round(sd(wholesale[,i]/1000),4)
sd_CV_tot[2,i-2]=round(sd(wholesale[,i]/1000)/mean(wholesale[,i]/1000),4)
sd_CV_ARB[1,i-2]=round(sd(wholesale[channel=="ARB",i]/1000),4)
sd_CV_ARB[2,i-2]=round(sd(wholesale[channel=="ARB",i]/1000)/mean(wholesale[channel=="ARB",i]/1000),4)
sd_CV_Dettaglio[1,i-2]=round(sd(wholesale[channel=="Dettaglio",i]/1000),4)
sd_CV_Dettaglio[2,i-2]=round(sd(wholesale[channel=="Dettaglio",i]/1000)/mean(wholesale[channel=="Dettaglio",i]/1000),4)
}
rownames(sd_CV_tot)=rownames(sd_CV_ARB)=rownames(sd_CV_Dettaglio)=c("SD","CV");
colnames(sd_CV_tot)=colnames(sd_CV_ARB)=colnames(sd_CV_Dettaglio)=colnames(prodotti);
print("SD E CV TOTALI"); sd_CV_tot
print("SD E CV ARB"); sd_CV_ARB
print("SD E CV DETTAGLIO"); sd_CV_Dettaglio
cv_tot=rbind(sd_CV_tot[2,],sd_CV_ARB[2,],sd_CV_Dettaglio[2,])
rownames(cv_tot)=c("CV TOT","CV ARB","CV DETTAGLIO")
###INDICI CONFRONTO: MEDIA/MEDIANA E QUARTILI
indici_confronto_tot=rbind(c(1:6),c(1:6));
for(i in 1:dim(prodotti)[2]) {
quantile_temp=quantile(prodotti[,i]/1000,seq(0,1,0.25));
indici_confronto_tot[1,i]=round((mean(prodotti[,i]/1000)-quantile_temp[3])/sd(prodotti[,i]/1000),4)
indici_confronto_tot[2,i]=round((quantile_temp[4]-2*quantile_temp[3]+quantile_temp[2])/(quantile_temp[4]-quantile_temp[2]),4)
}
rownames(indici_confronto_tot)=c("MEDIA/MEDIANA","QUARTILI");
colnames(indici_confronto_tot)=colnames(prodotti);
print("MEDIA/MEDIANA E QUARTILI TOTALI"); indici_confronto_tot
indici_confronto_ARB=rbind(c(1:6),c(1:6));
indici_confronto_Dettaglio=rbind(c(1:6),c(1:6));
for(i in 3:8) {
quantile_temp=quantile(wholesale[channel=="ARB",i]/1000,seq(0,1,0.25));
quantile_temp1=quantile(wholesale[channel=="Dettaglio",i]/1000,seq(0,1,0.25));
indici_confronto_ARB[1,i-2]=round((mean(wholesale[channel=="ARB",i-2]/1000)-quantile_temp[3])/sd(wholesale[channel=="ARB",i]/1000),4)
indici_confronto_ARB[2,i-2]=round((quantile_temp[4]-2*quantile_temp[3]+quantile_temp[2])/(quantile_temp[4]-quantile_temp[2]),4)
indici_confronto_Dettaglio[1,i-2]=round((mean(wholesale[channel=="Dettaglio",i]/1000)-quantile_temp1[3])/sd(wholesale[channel=="Dettaglio",i]/1000),4)
indici_confronto_Dettaglio[2,i-2]=round((quantile_temp1[4]-2*quantile_temp1[3]+quantile_temp1[2])/(quantile_temp1[4]-quantile_temp1[2]),4)
}
rownames(indici_confronto_ARB)=rownames(indici_confronto_Dettaglio)=c("MEDIA/MEDIANA","QUARTILI")
colnames(indici_confronto_ARB)=colnames(indici_confronto_Dettaglio)=colnames(prodotti)
print("MEDIA/MEDIANA E QUARTILI ARB"); indici_confronto_ARB
print("MEDIA/MEDIANA E QUARTILI DETTAGLIO"); indici_confronto_Dettaglio
###GRAFICI PLOT TRA DUE VARIABILI QUANTITATIVE [ZOOM 40K]
plot(prodotti[,1:6]/1000, xlim=c(0,30),ylim=c(0,30))
title("TOTALE")
dev.new()
vect
dim(vect)[2]
print("SD E CV TOTALI"); sd_CV_tot
load_all()
library(Bross)
sd_cv(prodotti)
load_all()
library(Bross   )
sd_cv(prodotti)
library(Bross)
laod_all()
load_all()
library(Bross   )
sd_cv(prodotti)
load_all()
library(Bross)
load_all
load_all()
library(Bross)
load_all()
library(Bross)
load_all()
library(Bross)
###GRAFICO DISPERSIONE VARIABILI CORRELATE
plot(wholesale[channel=="ARB",5]/1000,wholesale[channel=="ARB",4]/1000,ylim=c(0,40),xlim=c(0,40),xlab="Grocery",ylab="Milk",main="Grafico dispersione: Milk ~ Grocery [limite 40M]",col="orange",pch=17)
par(new=T)
plot(wholesale[channel=="Dettaglio",5]/1000,wholesale[channel=="Dettaglio",4]/1000,ylim=c(0,40),xlim=c(0,40),xlab="",ylab="",main="",col="purple",pch=18)
abline(h=mean(Milk/1000),col="red",lwd=2)
abline(v=mean(Grocery/1000),col="blue",lwd=2)
legend(30,38,legend=c("ARB","Dettaglio"),col=c("orange","purple"),pch=c(17,18))
plot(wholesale[channel=="ARB",5]/1000,wholesale[channel=="ARB",7]/1000,ylim=c(0,40),xlim=c(0,40),xlab="Grocery",ylab="Detergents_Paper",main="Grafico dispersione: Detergents_Paper ~ Grocery [limite 40M]",col="darkgreen",pch=17)
par(new=T)
plot(wholesale[channel=="Dettaglio",5]/1000,wholesale[channel=="Dettaglio",4]/1000,ylim=c(0,40),xlim=c(0,40),xlab="",ylab="",main="",col="brown",pch=18)
abline(h=mean(Detergents_Paper/1000),col="red",lwd=2)
abline(v=mean(Grocery/1000),col="blue",lwd=2)
legend(30,38,legend=c("ARB","Dettaglio"),col=c("darkgreen","brown"),pch=c(17,18))
###COVARIANZA E CORRELAZIONE TRA VARIABILI QUANTITATIVE
cov_tot=cov(prodotti[,1:6]/1000);
cov_ARB=cov(wholesale[channel=="ARB",3:8]/1000);
cov_Dettaglio=cov(wholesale[channel=="Dettaglio",3:8]/1000);
for(i in 1:dim(prodotti)[2]) {
for(j in 1:dim(prodotti)[2]) {
if (i==j) {
cov_tot[i,j]="=="
cov_ARB[i,j]="=="
cov_Dettaglio[i,j]="=="
} else {
cov_tot[i,j]=round(as.numeric(cov_tot[i,j]),4)
cov_ARB[i,j]=round(as.numeric(cov_ARB[i,j]),4)
cov_Dettaglio[i,j]=round(as.numeric(cov_Dettaglio[i,j]),4)
}
}
}
cov_tot
cov_ARB
cov_Dettaglio
cor_tot=cor(prodotti[,1:6]/1000)
cor_ARB=cor(wholesale[channel=="ARB",3:8]/1000)
cor_Dettaglio=cor(wholesale[channel=="Dettaglio",3:8]/1000)
for(i in 1:dim(prodotti)[2]) {
for(j in 1:dim(prodotti)[2]) {
if (i==j) {
cor_tot[i,j]="=="
cor_ARB[i,j]="=="
cor_Dettaglio[i,j]="=="
} else {
cor_tot[i,j]=round(as.numeric(cor_tot[i,j]),4)
cor_ARB[i,j]=round(as.numeric(cor_ARB[i,j]),4)
cor_Dettaglio[i,j]=round(as.numeric(cor_Dettaglio[i,j]),4)
}
}
}
cor_tot
cor_ARB
cor_Dettaglio
cov(prodotti)
load_all())
load_all()
library(Bross)
cov_cor(prodotti)
cov_cor(prodotti/1000)
load_all()
library(Bross)
cov_cor(prodotti/1000)
a <- cov_cor(prodotti/1000)
a <- cov_cor(prodotti)
load_all()
library(Bross)
load_all()
load_all(
)
load_all()
load_all()
library(Bross)
load_all()
library((Bross))
library(Bross)
channel
a <- as.factor(c(1,2,3,1,1,1,2,3,2,3,3,2,2,1,3))
a
is.factor(a)
is.numeric(a)
is.integer(a)
cluster::animals
datasets::co2
datasets::USPersonalExpenditure
datasets::Titanic
datasets::LakeHuron
datasets::longley
?hclust
USArrests
?printcomp
?princomp
datasets::USArrests
result <- cov_cor(datasets::USAssets)
result <- cov_cor(USAssets)
result <- cov_cor(datasets::USArrests)
load_all()
USArrests
datasets::USArrests
result$COV_TOT
load_all()
library(Bross   )
result <- indici_conf(datasets::USArrests)
result$
s
result
result <- sd_cv(datasets::USArrests)
result <- qunatili(datasets::USArrests)
result <- quantili(datasets::USArrests)
result <- cluster(datasets::USArrests, "euclidean", "ward.D", 3)
result$data
result$group
result$baricentri_cluster
result$compattezza_cluster
result$inerzia
result <- cluster(datasets::USArrests, 2, "ward.D", 2)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
scale(USArrests)
as.matrix(scale(data_st))
as.matrix(scale(USArrests))
cor(as.matrix(scale(USArrests)))^2
as.dist(cor(as.matrix(scale(USArrests)))^2)
load_all()
library(Bross)
cluster_var(datasets::USArrests, 2, "ward.D", 2)
cluster_var(datasets::USArrests, 2, "ward.D", 3)
cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
cluster_var(datasets::USArrests, 2, "ward.D", 2)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
load_all()
library(Bross)
result <- cluster_var(datasets::USArrests, 2, "ward.D", 2)
result <- pca(datasets::USArrests)
result$Fedelta_PCA
result$R_PCA
result$Loadings
load_all()
library(Bross)
result <- pca(datasets::USArrests)
pca_plot(USArrests)
load_all(9)
load_all()
library(Bross)
pca_plot(USArrests)
result <- pca_plot(USArrests)
pca_plot(datasets::USArrests)
R <- pca(datasets::USArrests)$R_PCA
pca_plot_comp(datasets::USArrests, R, 2)
load_all()
library(Bross)
pca_plot_comp(datasets::USArrests, R, 2)
datasets::USArrests
datasets::AirPassengers
datasets::ChickWeight
datasets::volcano
datasets::trees
datasets::AirPassengers
datasets::USAccDeaths
datasets::USJudgeRatings
datasets::USPersonalExpenditure
datasets::uspop
datasets::EuStockMarkets
datasets::esoph
datasets::esoph
?esoph
is.factor(esoph$agegp)
is.factor(esoph$alcgp)
load_all()
library(Bross)
data <- datasets::esoph
table_factor(data$agegp, data$alcgp, c("Fascia_eta", "Alcool"), "topright")
data$agegp
is.factor(data$agegp)
data <- as.matrix(data)
for(i in 1:dim(data)[2])
if(!is.factor(data[ , i]))
stop("L'argomento fornito deve essere di tipo factor!")
load_all()
dim(data)[2]
library(Bross)
for(i in 1:dim(data)[2])
if(!is.factor(data[ , i]))
stop("L'argomento fornito deve essere di tipo factor!")
table_factor(data$agegp, data$alcgp, c("Fascia_eta", "Alcool"), "topright")
data <- datasets::esoph
table_factor(data$agegp, data$alcgp, c("Fascia_eta", "Alcool"), "topright")
data
is.factor(data$agegp)
dim[2](data$agegp)
dim(data$agegp)[2]
dim(as.matrix(data$agegp))[2]
dataset <- datasets::esoph
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all)
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
check_IS.FACTOR(dataset$agegp)
data <- as.matrix(dataset)
data
is.factor(data$agegp)
is.factor(data[1])
is.factor(data[,1])
load_all()
library(Bross)
check_IS.FACTOR(dataset$agegp)
load_all()
library(Bross)
check_IS.FACTOR(dataset$agegp)
load_all()
library(Bross)
dataset <- datasets::esoph
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
result <- table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
result$prof_riga
result$prof_colonna
result$f1
result$f1_rel
result$f2_rel
result$f2_rel+
s
result$f1_f2_ass_marg
result$f1_f2_rewl_marg
result$f1_f2_rel_marg
result$prof_riga
divide_FACTOR.NUMERIC(datasets::esoph)
result <- divide_FACTOR.NUMERIC(datasets::esoph)
result
result$factor
load_all()
library(Bross)
result <- divide_FACTOR.NUMERIC(datasets::esoph)
result$factor
load_all()
channel_ass=table(channel)
channel_rel=prop.table(channel_ass)
channel_ass
round(channel_rel*100,2)
### analizzo le tabelle di contigenza assolute e relative tra "Channel" e "Region" con i marginali
channel_region_ass=table(channel,region)
channel_region_ass_marg=cbind(channel_region_ass,margin.table(channel_region_ass,1))
channel_region_ass_marg=rbind(channel_region_ass_marg,margin.table(channel_region_ass_marg,2))
channel_region_ass_marg
channel_region_ass=table(channel,region)
channel_region_ass_marg=cbind(channel_region_ass,margin.table(channel_region_ass,1))
channel_region_ass_marg=rbind(channel_region_ass_marg,margin.table(channel_region_ass_marg,2))
channel_region_ass_marg
channel_region_rel=prop.table(channel_region_ass)
channel_region_rel_marg=cbind(channel_region_rel,margin.table(channel_region_rel,1))
channel_region_rel_marg=rbind(channel_region_rel_marg,margin.table(channel_region_rel_marg,2))
round(channel_region_rel_marg*100,2)
### analizzo le condizionate riga e colonna tra "Channel" e "Region" con i marginali
prof_riga_channel_region=prop.table(channel_region_ass,1)
round(rbind(cbind(prof_riga_channel_region,margin.table(prof_riga_channel_region,1)),channel_region_rel_marg[3,])*100,2)
prof_colonna_channel_region=prop.table(channel_region_ass,2)
round(cbind(rbind(prof_colonna_channel_region,margin.table(prof_colonna_channel_region,2)),channel_region_rel_marg[,4])*100,2)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
channel_region_rel_marg[3,]
round(rbind(cbind(prof_riga_channel_region,margin.table(prof_riga_channel_region,1)),channel_region_rel_marg[dim(channel_region_rel_marg)[1],])*100,2)
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
dim(f1_f2_rel_marg)[2]
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
dataset <- datasets::esoph
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")ù
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
round(rbind(cbind(prof_riga_channel_region,margin.table(prof_riga_channel_region,1)),channel_region_rel_marg[3,])*100,2)
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
factor1 <- dataset$agegp
factor2 <- dataset$alcgp
f1_ass <- table(factor1)
f1_rel <- prop.table(f1_ass)
f2_ass <- table(factor2)
f2_rel <- prop.table(f2_ass)
f1_f2_ass <- table(factor1, factor2)
f1_f2_ass_marg <- cbind(f1_f2_ass, margin.table(f1_f2_ass, 1))
f1_f2_ass_marg <- rbind(f1_f2_ass_marg, margin.table(f1_f2_ass_marg, 2))
f1_f2_rel <- prop.table(f1_f2_ass)
f1_f2_rel_marg <- cbind(f1_f2_rel, margin.table(f1_f2_rel, 1))
f1_f2_rel_marg <- rbind(f1_f2_rel_marg, margin.table(f1_f2_rel_marg, 2))
f1_f2_rel_marg
f1_f2_rel_marg[dim(f1_f2_rel_marg)[1],]
f1_f2_rel_marg[,dim(f1_f2_rel_marg)[2]]
print(round(rbind(cbind(prof_riga_f1_f2, margin.table(prof_riga_f1_f2, 1)), f1_f2_rel_marg[dim(f1_f2_rel_marg)[1],])*100, 2), quote = FALSE)
print(round(rbind(cbind(prof_riga_f1_f2, margin.table(prof_riga_f1_f2, 1)), f1_f2_rel_marg[dim(f1_f2_rel_marg)[1],])*100, 2), quote = FALSE)
#analyzing conditioned f1 and f2, print table
prof_riga_f1_f2 <- prop.table(f1_f2_ass, 1)
prof_colonna_f1_f2 <- prop.table(f1_f2_ass, 2)
print(round(rbind(cbind(prof_riga_f1_f2, margin.table(prof_riga_f1_f2, 1)), f1_f2_rel_marg[dim(f1_f2_rel_marg)[1],])*100, 2), quote = FALSE)
prof_riga_f1_f2 <- rbind(cbind(prof_riga_f1_f2, margin.table(prof_riga_f1_f2, 1)), f1_f2_rel_marg[dim(f1_f2_rel_marg)[1],])*100
print(round(prof_riga_f1_f2, 2), quote = FALSE)
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
table_factor(dataset$agegp, dataset$alcgp, c("Fascia_eta", "Alcool"), "topright")
load_all()
library(Bross)
library(Bross)
load_all()
library(Bross)
install.packages("Bross")
package_version(bros)
package_version(Bross)
package_version("Bross")
installed.packages()
lifecycle::badge()
datasets::esoph
levels(esoph$agegp)
levels(esoph$agegp, quote=FALSE)
print(levels(esoph$agegp), quote = FALSE)
load_all()
library(devtools)
load_all()
library(Bross)
divide_FACTOR.NUMERIC(c("a","b"), c("s","t","r"), c("PIPPO","GIANNI"),"topleft")
table_factor(c("a","b"), c("s","t","r"), c("PIPPO","GIANNI"),"topleft")
table_factor(as.factor(c("a","b")), as.factor(c("s","t","r")), c("PIPPO","GIANNI"),"topleft")
table_factor(c("a","b"), c("s","t","r"), c("PIPPO","GIANNI"),"topleft")
table_factor(as.factor(c("a","b")), as.factor(c("s","t","r")), c("PIPPO","GIANNI"),"topleft")
?table
table("a",c("b","C"))
table(c("a","d"),c("b","C"))
.packages()
.packages(TRUE)
install.packages("Bross", available = TRUE)
available.packages()
?available.packages
available.packages(max_repo_cache_age = 10000)
available.packages(max_repo_cache_age = 1000)
available.packages(max_repo_cache_age = 1000, ignore_repo_cache = TRUE)
available.packages(max_repo_cache_age = 10, ignore_repo_cache = TRUE)
available.packages(ignore_repo_cache = TRUE)
available.packages("Bross")
available.packages("CRAN/Bross")
available.packages("CRAN")
